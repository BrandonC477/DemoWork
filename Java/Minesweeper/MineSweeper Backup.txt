import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Minesweeper extends Application{
	int[][] game;
	gameBoardButton gameBoardButton[][];
	ImageView smiley;
	ImageView gameTile;
	int rows = 8;
	int columns = 8;
	int mines;
	int displayMines;
	int difficulty = 0; // 0 is Beginner, 1 is Intermediate, 2 is Expert
	int timePassed;
	boolean startTimer;
	boolean firstClick;
	Label DurationLabel = new Label(String.format("%03d", timePassed));
	Label mineLabel = new Label(String.format("%03d", mines));
	Timeline timer = new Timeline(new KeyFrame(Duration.millis(1000), e ->{
		timePassed++;
		DurationLabel.setText(String.format("%03d", timePassed));
	}));
	public static void main(String[] args){
		launch(args);
	}
	public void start(Stage theStage){
		if(difficulty == 0){
			rows = 8;
			columns = 8;
			mines = 10;
		}else if(difficulty == 1){
			rows = 16;
			columns = 16;
			mines = 40;
		}else if(difficulty == 2){
			rows = 16;
			columns = 32;
			mines = 99;
		}
		theStage.setScene(new Scene(createGameBoard(theStage)));
		theStage.setTitle("Mine Sweeper");
		theStage.show();
	}
	public Pane createGameBoard(Stage theStage){
		VBox menu = createMenu(theStage);
		startTimer = true;
		timePassed = 0;
		DurationLabel.setText(String.format("%03d", timePassed));
		DurationLabel.setFont(Font.loadFont("file:src/res/digital-7.ttf", 30));
		DurationLabel.setTextFill(Color.RED);
		game = generateMines();
		mineLabel.setText(String.format("%03d", mines));
		mineLabel.setFont(Font.loadFont("file:src/res/digital-7.ttf", 30));
		mineLabel.setTextFill(Color.RED);
		BorderPane fullGamePane = new BorderPane();
		BorderPane pane = new BorderPane();
		GridPane gameBoard = new GridPane();
		NewGameButton smiley = new NewGameButton();	
		smiley.setOnAction(e -> {
			timer.pause();
			start(theStage);
		});
		pane.setPadding(new Insets(0,0,0,8));
		pane.setLeft(mineLabel);
		pane.setCenter(smiley);
		pane.setRight(DurationLabel);
		createButtons(gameBoard,smiley, pane);
		fullGamePane.setTop(menu);
		fullGamePane.setCenter(pane);
		fullGamePane.setBottom(gameBoard);
		return fullGamePane;
	}
	public void disableAllButtons(){
		for(int i = 0; i < gameBoardButton.length; i++){
			for(int j = 0; j < gameBoardButton[i].length;j++){
				gameBoardButton[i][j].setOnMouseClicked(null);
			}
		}
	}
	public void displayMines(){
		for(int i = 0; i < game.length; i++){
			for(int j = 0; j < game[i].length;j++){
				if(gameBoardButton[i][j].getFlagged() && game[i][j] != -1)
					gameBoardButton[i][j].setGraphic(new ImageView(new Image("/res/mine-misflagged.png")));
				else if(game[i][j] == -1)
					gameBoardButton[i][j].setGraphic(new ImageView(new Image("/res/mine-grey.png")));
			}
		}
	}
	public void displayFlags(){
		for(int i = 0; i < game.length; i++){
			for(int j = 0; j < game[i].length;j++){
				if(game[i][j] == -1){
					gameBoardButton[i][j].setGraphic(new ImageView(new Image("/res/flag.png")));
				}
			}
		}
	}
	public int[][] generateMines(){
		int[][] game = new int[rows][columns];
		int mineCount = 0;
		while(mineCount < mines){
			int randomX = (int)(Math.random() * rows);
			int randomY = (int)(Math.random() * columns);
			if(game[randomX][randomY] == -1){
				continue;
			}else{
				game[randomX][randomY] = -1;
				mineCount++;
			}
		}
		int count;
		for(int i = 0; i < game.length;i++){
			for(int j = 0; j < game[i].length;j++){
				count = 0;
				if(game[i][j] != -1){
					if((j + 1) < game[i].length && (game[i][j+1] == -1)){
						count++;
					}
					if((i + 1) < game.length && (game[i+1][j] == -1)){
						count++;
					}
					if((j-1) >= 0 && (game[i][j-1] == -1)){
						count++;
					}
					if((i-1) >= 0 && (game[i-1][j] == -1)){
						count++;
					}
					if((i+1) < game.length && (j+1) < game[i].length && (game[i+1][j+1] == -1)){
						count++;
					}
					if((i-1) >= 0 && (j-1) >= 0 && (game[i-1][j-1] == -1)){
						count++;
					}
					if((i-1) >= 0 && (j+1) < game[i].length && (game[i-1][j+1] == -1)){
						count++;
					}
					if((i+1) < game.length && (j-1) >= 0 && (game[i+1][j-1] == -1)){
						count++;
					}
					game[i][j] = count;
				}
				System.out.print(game[i][j] + " ");
			}
			System.out.println();
		}
		return game;
	}
	public boolean checkWin(){
		int count = 0;
		for(int i = 0;i < gameBoardButton.length;i++){
			for(int j = 0; j < gameBoardButton[i].length;j++){
				if(gameBoardButton[i][j].getState() == 1 || gameBoardButton[i][j].getState() == 2){
					count++;
				}
			}
		}
		if(count == ((rows * columns) - mines)){
			return true;
		}else{
			return false;
		}
	}
	public void applyWin(NewGameButton smiley){
		smiley.setGraphic(new ImageView(new Image("/res/face-win.png")));
		disableAllButtons();
		displayFlags();
		timer.pause();
	}
	public void applyLoss(int x, int y, NewGameButton smiley){
		displayMines();
		disableAllButtons();
		timer.pause();
		gameBoardButton[x][y].setGraphic(new ImageView(new Image("/res/mine-red.png")));
		smiley.setGraphic(new ImageView(new Image("/res/face-dead.png")));
	}
	public boolean correctFlags(int x, int y){
		int count = 0;
		if((y + 1) < game[x].length && gameBoardButton[x][y+1].getFlagged()){
			count++;
		}
		if((x + 1) < game.length && gameBoardButton[x+1][y].getFlagged()){
			count++;
		}
		if((y-1) >= 0 && gameBoardButton[x][y-1].getFlagged()){
			count++;
		}
		if((x-1) >= 0 && gameBoardButton[x-1][y].getFlagged()){
			count++;
		}
		if((x+1) < game.length && (y+1) < game[x].length && gameBoardButton[x+1][y+1].getFlagged()){
			count++;
		}
		if((x-1) >= 0 && (y-1) >= 0 && gameBoardButton[x-1][y-1].getFlagged()){
			count++;
		}
		if((x-1) >= 0 && (y+1) < game[x].length && gameBoardButton[x-1][y+1].getFlagged()){
			count++;
		}
		if((x+1) < game.length && (y-1) >= 0 && gameBoardButton[x+1][y-1].getFlagged()){
			count++;
		}
		if(count >= game[x][y]){
			return true;
		}else{
			return false;
		}
	}
	public void setStateOne(int test, int x, int y){
		gameBoardButton[x][y].setGraphic(new ImageView(new Image("/res/" + test + ".png")));
		gameBoardButton[x][y].setState(1);
	}
	public void setStateTwo(int test, int x, int y){
		gameBoardButton[x][y].setGraphic(new ImageView(new Image("/res/" + test + ".png")));
		gameBoardButton[x][y].setState(2);
	}
	public void createButtons(GridPane gameBoard, NewGameButton smiley, BorderPane pane){
		gameBoardButton = new gameBoardButton[rows][columns];
		displayMines = mines;
		Label displayMinesLabel = new Label(String.format("%03d", displayMines));
		displayMinesLabel.setFont(Font.loadFont("file:src/res/digital-7.ttf", 30));
		displayMinesLabel.setTextFill(Color.RED);
		for(int i = 0; i < gameBoardButton.length; i++){
			for(int j = 0; j < gameBoardButton[i].length; j++){
				int mineTest = game[i][j];
				int x = i;
				int y = j;
				gameBoardButton[i][j] = new gameBoardButton();
				gameBoardButton currentButton = gameBoardButton[i][j];
					currentButton.setOnMousePressed(e -> {
						smiley.setGraphic(new ImageView(new Image("/res/face-O.png")));
					});
					currentButton.setOnMouseReleased(e ->  smiley.setGraphic(new ImageView(new Image("/res/face-smile.png"))));
				currentButton.setOnMouseClicked(e -> {
					if(startTimer){
						timer.setCycleCount(Timeline.INDEFINITE);
						timer.play();
					}
					if(!currentButton.getFlagged()){
						if(e.getButton() == MouseButton.PRIMARY){
							if(currentButton.getState() == 0)
								if((mineTest < 9) && (mineTest > 0)){
									currentButton.setGraphic(new ImageView(new Image("/res/" + mineTest + ".png")));
									currentButton.setState(1);
									if(checkWin())
										applyWin(smiley);
								}else if(mineTest == 0){
									clearBlanks(x,y);
									if(checkWin())
										applyWin(smiley);
								}else{
									applyLoss(x,y,smiley);
									currentButton.setGraphic(new ImageView(new Image("/res/mine-red.png")));
								}
							if(currentButton.getState() == 1)
								if(correctFlags(x,y))
									clearTiles(x,y,smiley);
									if(checkWin())
										applyWin(smiley);
						}
					}
					if(e.getButton() == MouseButton.SECONDARY){
						if(currentButton.getState() == 0)
							if(!currentButton.getFlagged()){
								currentButton.setGraphic(new ImageView(new Image("/res/flag.png")));
								displayMines--;
								currentButton.setFlagged();
								displayMinesLabel.setText(String.format("%03d", displayMines));
								pane.setLeft(displayMinesLabel);
							}else{
								currentButton.setGraphic(new ImageView(new Image("/res/cover.png")));
								displayMines++;
								currentButton.setFlagged();
								displayMinesLabel.setText(String.format("%03d", displayMines));
								pane.setLeft(displayMinesLabel);
							}
					}	
				});
				gameBoard.add(currentButton,j,i);
			}
		}
	}
	public VBox createMenu(Stage theStage){
		VBox gameMenu = new VBox();
		MenuBar menuBar = new MenuBar();
		Menu Difficulties = new Menu("Difficulties");
		MenuItem Beginner = new MenuItem("Beginner");
		MenuItem Intermediate = new MenuItem("Intermediate");
		MenuItem Expert = new MenuItem("Expert");
		Beginner.setOnAction(e ->{
			difficulty = 0;
			timer.pause();
			start(theStage);
		});
		Intermediate.setOnAction(e -> {
			difficulty = 1;
			timer.pause();
			start(theStage);
		});
		Expert.setOnAction(e -> {
			difficulty = 2;
			timer.pause();
			start(theStage);
		});
		gameMenu.getChildren().add(menuBar);
		menuBar.getMenus().add(Difficulties);
		Difficulties.getItems().addAll(Beginner,Intermediate,Expert);
		return gameMenu;
	}
	public void clearBlanks(int x, int y){
		if(gameBoardButton[x][y].getState() == 0){
			setStateOne(game[x][y],x,y);
			if(y + 1 < game[x].length && game[x][y+1] == 0){
				clearBlanks(x,y+1);
			}else if(y + 1 < game[x].length){
				setStateOne(game[x][y+1],x,y+1);	
			}
			if(x + 1 < game.length && game[x+1][y] == 0){
				clearBlanks(x+1,y);
			}else if(x + 1 < game.length){
				setStateOne(game[x+1][y],x+1,y);
			}
			if(x - 1 >= 0 && game[x-1][y] == 0){
				clearBlanks(x-1,y);
			}else if(x - 1 >= 0){
				setStateOne(game[x-1][y],x-1,y);
			}
			if( y - 1 >= 0 && game[x][y-1] == 0){
				clearBlanks(x,y-1);
			}else if(y - 1 >= 0){
				setStateOne(game[x][y-1],x,y-1);
			}
			if(x + 1 < game.length && y + 1 < game[x].length && game[x+1][y+1] == 0){
				clearBlanks(x+1,y+1);
			}else if(x + 1 < game.length && y + 1 < game[x].length){
				setStateOne(game[x+1][y+1],x+1,y+1);
			}
			if(x - 1 >= 0 && y - 1 >= 0 && game[x-1][y-1] == 0){
				clearBlanks(x-1,y-1);
			}else if(x - 1 >= 0 && y - 1 >= 0){
				setStateOne(game[x-1][y-1],x-1,y-1);
			}
			if(x + 1 < game.length && y - 1 >= 0 && game[x+1][y-1] == 0){
				clearBlanks(x+1,y-1);
			}else if( x + 1 < game.length && y - 1 >= 0){
				setStateOne(game[x+1][y-1],x+1,y-1);
			}
			if(x - 1 >= 0 && y + 1 < game[x].length && game[x-1][y+1] == 0){
				clearBlanks(x-1,y+1);
			}else if(x - 1 >= 0 && y + 1 < game[x].length){
				setStateOne(game[x-1][y+1],x-1,y+1);
			}
		}
	}
	public void clearTiles(int x, int y, NewGameButton smiley){
		setStateTwo(game[x][y],x,y);
		if((y + 1) < game[x].length)
			if(!gameBoardButton[x][y+1].getFlagged())
				if(game[x][y+1] != -1)
					if(game[x][y+1] == 0)
						clearBlanks(x,y+1);
					else
						setStateOne(game[x][y+1],x,y+1);
				else
					applyLoss(x,y+1,smiley);
		if((x + 1) < game.length)
			if(!gameBoardButton[x+1][y].getFlagged())
				if(game[x+1][y] != -1)
					if(game[x+1][y] == 0)
						clearBlanks(x+1,y);
					else
						setStateOne(game[x+1][y],x+1,y);
				else
					applyLoss(x+1,y,smiley);
		if((y-1) >= 0)
			if(!gameBoardButton[x][y-1].getFlagged())
				if(game[x][y-1] != -1)
					if(game[x][y-1] == 0)
						clearBlanks(x,y-1);
					else
						setStateOne(game[x][y-1],x,y-1);
				else
					applyLoss(x,y-1,smiley);
		if((x-1) >= 0)
			if(!gameBoardButton[x-1][y].getFlagged())
				if(game[x-1][y] != -1)
					if(game[x-1][y] == 0)
						clearBlanks(x-1,y);
					else
						setStateOne(game[x-1][y],x-1,y);
				else
					applyLoss(x-1,y,smiley);
		if((x+1) < game.length && (y+1) < game[x].length)
			if(!gameBoardButton[x+1][y+1].getFlagged())
				if(game[x+1][y+1] != -1)
					if(game[x+1][y+1] == 0)
						clearBlanks(x+1,y+1);
					else
						setStateOne(game[x+1][y+1],x+1,y+1);
				else
					applyLoss(x+1,y+1,smiley);
		if((x-1) >= 0 && (y-1) >= 0)
			if(!gameBoardButton[x-1][y-1].getFlagged())
				if(game[x-1][y-1] != -1)
					if(game[x-1][y-1] == 0)
						clearBlanks(x-1,y-1);
					else
						setStateOne(game[x-1][y-1],x-1,y-1);
				else
					applyLoss(x-1,y-1,smiley);
		if((x-1) >= 0 && (y+1) < game[x].length)
			if(!gameBoardButton[x-1][y+1].getFlagged())
				if(game[x-1][y+1] != -1)
					if(game[x-1][y+1] == 0)
						clearBlanks(x-1,y+1);
					else
					setStateOne(game[x-1][y+1],x-1,y+1);
				else
					applyLoss(x-1,y+1,smiley);
		if((x+1) < game.length && (y-1) >= 0)
			if(!gameBoardButton[x+1][y-1].getFlagged())
				if(game[x+1][y-1] != -1)
					if(game[x+1][y-1] == 0)
						clearBlanks(x+1,y-1);
					else
						setStateOne(game[x+1][y-1],x+1,y-1);
				else
					applyLoss(x+1,y-1,smiley);
	}
	class NewGameButton extends Button{
		public NewGameButton(){
			double size = 50;
			setMinWidth(size);
			setMaxWidth(size);
			setMinHeight(size);
			setMaxHeight(size);
			smiley = new ImageView(new Image("/res/face-smile.png"));
			setGraphic(smiley);
		}
	}
	class gameBoardButton extends Button{
		protected int state;
		protected boolean flagged = false;
		public gameBoardButton(){
			state = 0; // 0 is uncovered, 1 is uncovered, 2 is clicked twice
			double size = 30;
			setMinWidth(size);
			setMaxWidth(size);
			setMinHeight(size);
			setMaxHeight(size);
			gameTile = new ImageView(new Image("/res/cover.png"));
			setGraphic(gameTile);
		}
		public int getState(){
			return state;
		}
		public void setState(int x){
			state = x;
		}
		public boolean getFlagged(){
			return flagged;
		}
		public void setFlagged(){
			if(getFlagged()){
				flagged = false;
			}else{
				flagged = true;
			}
		}
	}
}